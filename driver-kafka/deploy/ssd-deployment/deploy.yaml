#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Set KRaft facts
  hosts: all
  tasks:
    - set_fact:
        kraft_enabled: "{{ groups['controller'] | default([]) | length>0 | bool }}"
      when: kraft is undefined
      run_once: true
    - assert:
        that: not(kraft_enabled and (sasl_enabled|default(false)|bool))
        msg: "SASL and KRaft cannot coexist"
      run_once: true
    - assert:
        that: "(groups['controller'] | default([]) | length > 0 | bool) or (groups['zookeeper'] | default([]) | length > 0 | bool)"
        msg: "Must specify one or more Controllers or ZooKeeper servers"
      run_once: true
  tags: always

- name: Set sysctl for client hosts
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        reload: yes
    - name: Install tmux to aid offline running of clients
      package:
        name: tmux
        state: present
    - name: Reboot the machine with all defaults
      reboot:
  tags: client

- name: Format and mount disks for Kafka hosts
  hosts: kafka
  connection: ssh
  become: true
  tasks:
    - command: >
        tuned-adm profile latency-performance
    - name: Get nvme device IDs
      set_fact:
        device_info: "{{ hostvars[inventory_hostname].ansible_devices }}"
        nvme_device_ids: "{{ hostvars[inventory_hostname].ansible_devices.keys() | map('regex_search', 'nvme.*') | select('string') | list }}"
    - name: Get nvme devices
      set_fact:
        nvme_devices: '{{ (nvme_devices | default([])) + ["/dev/" + item] }}'
      loop: '{{ nvme_device_ids }}'
      when: device_info[item]["partitions"] | length == 0
    - name: Get mount points
      set_fact:
        mounts: '{{ (mounts | default([])) + [{ "path": "/mnt/" + item, "src": "/dev/" + item}] }}'
      loop: '{{ nvme_device_ids }}'
      when: device_info[item]["partitions"] | length == 0
    - name: Format disks
      filesystem:
         fstype: xfs
         dev: '{{ item }}'
      with_items: '{{ nvme_devices }}'
    - name: Mount disks
      mount:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        fstype: xfs
        opts: defaults,noatime,nodiscard
        state: mounted
      with_items: '{{ mounts }}'
    - name: Increase hard file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'hard'
        limit_item: nofile
        value: 500000
    - name: Increase soft file descriptor limit
      pam_limits:
        domain: '*'
        limit_type: 'soft'
        limit_item: nofile
        value: 500000
    - name: Enable pam_limits.so
      lineinfile:
        path: /etc/pam.d/login
        insertafter: EOF
        line: 'session required pam_limits.so'
    - name: set vm.max_map_count
      sysctl:
        name: vm.max_map_count
        value: '262144'
        state: present
        reload: yes
    - name: Reboot the machine with all defaults
      reboot:
  tags: kafka

- name: Set facts
  hosts: all
  connection: ssh
  become: true
  tags: always
  tasks:
    - set_fact:
        zookeeperServers: "{{ groups['zookeeper'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:2181') | join(',') }}"
        bootstrapServers: "{{ groups['broker'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
        kafkaVersion: "3.4.0"

- name: Kafka setup
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Install RPM packages
      yum:
        pkg:
          - wget
          - java-11-openjdk
          - sysstat
          - vim
          - chrony
        state: latest
    - file: path=/opt/kafka state=directory
          #- debug:
          #msg: "zookeeper servers: {{ zookeeperServers }}\nboostrap servers: {{ bootstrapServers }}"
    - name: Download Kafka package
      unarchive:
        src: "{{ apache_download_url | default('http://archive.apache.org/dist/kafka/') }}{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz"
        remote_src: yes
        dest: /opt/kafka
        extra_opts: ["--strip-components=1"]
      retries: 5
      delay: 10
    - set_fact:
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - name: Change locale to en_US.utf-8
      shell: |
        echo 'LANG=en_US.utf-8
              LC_ALL=en_US.utf-8' > /etc/environment
  tags: download

- name: Create CA
  ansible.builtin.import_playbook: tls/create-ca.yml
  when: tls_enabled| default(False)|bool == True
  tags: tls

- name: Generate CSRs
  ansible.builtin.import_playbook: tls/generate-csrs.yml
  when: tls_enabled| default(False)|bool == True
  tags: tls

- name: Generate CSRs
  ansible.builtin.import_playbook: tls/issue-certs.yml
  when: tls_enabled| default(False)|bool == True
  tags: tls

- name: Install certs
  ansible.builtin.import_playbook: tls/install-certs.yml
  when: tls_enabled| default(False)|bool == True
  tags: tls

- name: Setup ZooKeeper
  hosts: zookeeper
  connection: ssh
  become: true
  tasks:
    - set_fact:
        zid: "{{ groups['zookeeper'].index(inventory_hostname) }}"
    - file:
        path: "/opt/kafka/data/zookeeper"
        state: directory
    - template:
        src: "templates/zookeeper.properties"
        dest: "/opt/kafka/config/zookeeper.properties"
    - template:
        src: templates/myid
        dest: "/opt/kafka/data/zookeeper/myid"
    - template:
        src: "templates/zookeeper.service"
        dest: "/etc/systemd/system/zookeeper.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "zookeeper"

- name: Setup SASL Users
  hosts: kafka
  tasks:
    - name: Create superuser
      command:
        cmd: "/opt/kafka/bin/kafka-configs.sh --zookeeper {{ zookeeperServers }} -alter --add-config 'SCRAM-SHA-256=[iterations=8192,password=admin-secret],SCRAM-SHA-512=[password=admin-secret]' --entity-type users --entity-name admin"
      run_once: true
      when: sasl_enabled| default(False)|bool == True

    - name: Create workload user
      command:
        cmd: "/opt/kafka/bin/kafka-configs.sh --zookeeper {{ zookeeperServers }} -alter --add-config 'SCRAM-SHA-256=[iterations=8192,password=admin-secret],SCRAM-SHA-512=[password=admin-secret]' --entity-type users --entity-name sa_test"
      run_once: true
      when: sasl_enabled| default(False)|bool == True

  tags: sasl

- name: Setup Kafka
  hosts: kafka
  connection: ssh
  become: true
  tasks:
    - set_fact:
        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    - set_fact:
        brokerId: "{{ groups['kafka'].index(inventory_hostname) }}"
    - shell:
         cmd: "/opt/kafka/bin/kafka-storage.sh random-uuid"
      run_once: true
      register: storage_id
      when: kraft_enabled | default(False) | bool == True
    - name: Set up broker
      template:
        src: "templates/server.properties"
        dest: "/opt/kafka/config/server.properties"
    - template:
        src: "templates/kafka.service"
        dest: "/etc/systemd/system/kafka.service"
    - name: Populate client config file
      template:
        src: "templates/client.properties"
        dest: "/opt/kafka/config/client.properties"
    - name: Initialise Storage
      shell:
        cmd: "/opt/kafka//bin/kafka-storage.sh format -t {{ storage_id.stdout }} -c /opt/kafka/config/server.properties" 
      register: result
      failed_when:
        - result.rc != 0
        - '"is already formatted" not in result.stderr'
      when: kraft_enabled | default(False) | bool == True
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "kafka"
  tags: 
    - kafka
    - init

- name: Setup ACLs
  hosts: kafka
  tasks:
    - name: Create ACLs
      command:
        cmd: "/opt/kafka/bin/kafka-acls.sh --bootstrap-server {{ bootstrapServers }} --command-config /opt/kafka/config/client.properties {{ item }}"
      loop:
        - "--add --allow-principal User:sa_test --operation create  --cluster"
        - "--add --allow-principal User:sa_test --operation read --operation write --operation create  --operation delete --operation describe --topic '*'"
        - "--add --allow-principal User:sa_test  --operation read --group '*'"
      run_once: true
      when: sasl_enabled| default(False)|bool == True
  tags: sasl

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set chrony path
      when: ansible_os_family == 'RedHat'
      set_fact:
        chrony_path: /etc/chrony.conf

    - name: Set chrony path
      when: ansible_os_family == 'Debian'
      set_fact:
        chrony: /etc/chrony/chrony.conf

    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "{{ chrony_path }}"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tags: client
  tasks:
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
    - shell: tuned-adm profile latency-performance

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/*.yaml
      register: drivers_list

    - name: Configure Bootstrap Servers
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  bootstrap.servers='
         line: '  bootstrap.servers={{ bootstrapServers }}'
      with_items: '{{ drivers_list.stdout_lines }}'

    - name: Get list of kafka driver config files
      raw: ls -1 /opt/benchmark/driver-kafka/kafka*.yaml
      register: kafka_drivers_list

    - name: Configure Kafka Bootstrap Servers
      lineinfile:
         dest: '{{ item }}'
         regexp: '^  bootstrap.servers='
         line: '  bootstrap.servers={{ bootstrapServers }}'
      with_items: '{{ kafka_drivers_list.stdout_lines }}'

    - name: Configure SASL Mechanism
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  sasl.mechanism="
        insertafter: "^  bootstrap.servers="
        line: "  sasl.mechanism=SCRAM-SHA-256"
      with_items: "{{ drivers_list.stdout_lines }}"
      when: sasl_enabled| default(False)|bool == True

    - name: Configure Benchmark Name
      lineinfile:
        dest: "{{ item }}"
        regexp: "^name: Kafka"
        line: "name: Kafka{{ '+SASL' if sasl_enabled | default(False) | bool }}{{ '+KRAFT' if kraft_enabled | default(False) | bool }}{{ '+TLS' if tls_enabled | default(False) | bool }}+{{ groups['broker'] | length  }}x{{ instance_type }}"
      with_items: "{{ drivers_list.stdout_lines }}"

    - name: Configure Security Protocol
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  security.protocol="
        insertafter: "^  bootstrap.servers="
        line: "  security.protocol={{ 'SASL_' if sasl_enabled | default(False) | bool }}{{ 'SSL' if tls_enabled | default(False) | bool else 'PLAINTEXT' }}"
      with_items: "{{ drivers_list.stdout_lines }}"
      when: (sasl_enabled| default(False)|bool == True ) or (tls_enabled| default(False)|bool == True )

    - name: Configure JAAS
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  sasl.jaas.config="
        insertafter: "^  bootstrap.servers="
        line: "  sasl.jaas.config=org.apache.kafka.common.security.scram.ScramLoginModule required username='sa_test' password='admin-secret';"
      with_items: "{{ drivers_list.stdout_lines }}"
      when: tls_enabled| default(False)|bool == True

    - name: Configure Kafka Connection Factory
      ansible.builtin.replace:
         dest: '{{ item }}'
         regexp: 'localhost\:9092'
         replace: '{{ bootstrapServers }}'
      with_items: '{{ kafka_drivers_list.stdout_lines }}'

    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark-worker
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xms90G -Xmx90G -XX:+UnlockExperimentalVMOptions -XX:+UseZGC -XX:+ParallelRefProcEnabled -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=12 -XX:ConcGCThreads=12 -XX:+DisableExplicitGC -XX:-ResizePLAB"'
    - name: Configure memory
      lineinfile:
         dest: /opt/benchmark/bin/benchmark
         regexp: '^JVM_MEM='
         line: 'JVM_MEM="-Xmx4G"'
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name:  Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: "Zookeeper servers {{ item }}"
      with_items: "{{ groups['zookeeper'] }}"
    - debug:
        msg: "Kafka brokers {{ item }}"
      with_items: "{{ groups['kafka'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"
